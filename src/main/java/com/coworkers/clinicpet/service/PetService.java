package com.coworkers.clinicpet.service;import com.coworkers.clinicpet.model.dto.PetDTO;import com.coworkers.clinicpet.model.entities.MedicalHistory;import com.coworkers.clinicpet.model.entities.MedicalRecord;import com.coworkers.clinicpet.model.entities.Owner;import com.coworkers.clinicpet.model.entities.Pet;import com.coworkers.clinicpet.repository.PetRepository;import com.coworkers.clinicpet.util.NotFoundException;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class PetService {    @Autowired    private PetRepository petRepository;    @Autowired    private ModelMapper modelMapper;    public PetDTO createPet(PetDTO dto) {        Pet pet = modelMapper.map(dto, Pet.class);        return modelMapper.map(petRepository.save(pet), PetDTO.class);    }    public List<PetDTO> getAllPets() {        List<Pet> pets = petRepository.findAll();        return pets.stream()                .map(pet -> modelMapper.map(pet, PetDTO.class)                )                .collect(Collectors.toList());    }    public PetDTO getPetById(Long id) {        Pet pet = petRepository.findById(id)                .orElseThrow(() -> new NotFoundException("Pet Not Found: " + id));        return modelMapper.map(pet, PetDTO.class);    }//    public PetDTO updatePet(PetDTO petDTO, Long id) {//        Pet existsPet = petRepository.findById(id)//                .orElseThrow(() -> new NotFoundException("Pet Not Found: " + id));////        existsPet.setName(petDTO.getName());//        existsPet.setTypeOfAnimal(petDTO.getTypeOfAnimal());//        existsPet.setAge(petDTO.getAge());//        existsPet.setOwner(modelMapper.map(petDTO.getOwnerDTO(), Owner.class));//        existsPet.setMedicalRecord(modelMapper.map(petDTO.getMedicalRecordDTO(), MedicalRecord.class));//        existsPet.setMedicalHistory(modelMapper.map(petDTO.getMedicalHistoryDTO(), MedicalHistory.class));//        Pet newPet = petRepository.save(existsPet);////        return modelMapper.map(newPet, PetDTO.class);//    }    public PetDTO updatePet(PetDTO petDTO, Long id) {        // Primero, intentamos encontrar el registro existente        Pet existsPet = petRepository.findById(id)                .orElse(null); // Si no se encuentra, 'existsPet' serÃ¡ null        if (existsPet == null) {            // Si no encontramos el registro, lo creamos            Pet pet = modelMapper.map(petDTO, Pet.class);            pet.setOwner(modelMapper.map(petDTO.getOwnerDTO(), Owner.class));            pet.setMedicalRecord(modelMapper.map(petDTO.getMedicalRecordDTO(), MedicalRecord.class));            pet.setMedicalHistory(modelMapper.map(petDTO.getMedicalHistoryDTO(), MedicalHistory.class));            Pet newPet = petRepository.save(pet);            return modelMapper.map(newPet, PetDTO.class);        } else {            // Si encontramos el registro, lo actualizamos como antes            existsPet.setName(petDTO.getName());            existsPet.setTypeOfAnimal(petDTO.getTypeOfAnimal());            existsPet.setAge(petDTO.getAge());            existsPet.setOwner(modelMapper.map(petDTO.getOwnerDTO(), Owner.class));            existsPet.setMedicalRecord(modelMapper.map(petDTO.getMedicalRecordDTO(), MedicalRecord.class));            existsPet.setMedicalHistory(modelMapper.map(petDTO.getMedicalHistoryDTO(), MedicalHistory.class));            Pet updatedPet = petRepository.save(existsPet);            return modelMapper.map(updatedPet, PetDTO.class);        }    }    public void deletePet(Long id){        Pet pet = petRepository.findById(id)                .orElseThrow(() -> new NotFoundException("Pet Not Found: " +id));        petRepository.delete(pet);    }}