package com.coworkers.clinicpet.service;import com.coworkers.clinicpet.model.dto.OwnerDTO;import com.coworkers.clinicpet.model.entities.Owner;import com.coworkers.clinicpet.model.entities.Pet;import com.coworkers.clinicpet.repository.OwnerRepository;import com.coworkers.clinicpet.util.NotFoundException;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;@Servicepublic class OwnerService {    @Autowired    private OwnerRepository ownerRepository;    @Autowired    private ModelMapper modelMapper;    public OwnerDTO createOwner(OwnerDTO ownerDTO) {        Owner owner = modelMapper.map(ownerDTO, Owner.class);        owner = ownerRepository.save(owner);        return modelMapper.map(owner, OwnerDTO.class);    }    public List<OwnerDTO> getAllOwners() {        List<Owner> owners = ownerRepository.findAll();        return owners.stream().map(owner -> modelMapper                        .map(owner, OwnerDTO.class))                .toList();    }    public OwnerDTO getOwnerById(Long ownerId) {        Owner owner = ownerRepository.findById(ownerId).orElseThrow(() -> new NotFoundException("Owner not found for ID: " + ownerId));        return modelMapper.map(owner, OwnerDTO.class);    }    public OwnerDTO updateOwner(OwnerDTO ownerDTO, Long ownerId) {        Owner owner = ownerRepository.findById(ownerId)                .orElseThrow(() -> new NotFoundException("Owner not found"));        owner.setName(ownerDTO.getName());        owner.setLastName(ownerDTO.getLastName());        owner.setEmail(ownerDTO.getEmail());        owner.setPhone(ownerDTO.getPhone());        owner.setAddress(ownerDTO.getAddress());        if (ownerDTO.getPetDTO() != null && !ownerDTO.getPetDTO().isEmpty()) {            List<Pet> pets = ownerDTO.getPetDTO().stream()                    .map(petDTO -> modelMapper.map(petDTO, Pet.class))                    .collect(Collectors.toList());            pets.forEach(pet -> pet.setOwner(owner));            owner.setPets(pets);        }        Owner updatedOwner = ownerRepository.save(owner);        return modelMapper.map(updatedOwner, OwnerDTO.class);    }    public void deleteOwner(Long id){        Owner owner = ownerRepository.findById(id)                .orElseThrow(()-> new NotFoundException("Owner not found: " + id));        ownerRepository.delete(owner);    }}